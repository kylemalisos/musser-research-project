let x = 150;
let y = 0;
let z = 0;
let angle = 0;
const angleDelta = 3;
const distDelta = 5;
camAngle = 200;
camOffset = -40;
rearCameraOn = false;

let box1Y = 2000;
let box1Dir = true;

let box2Y = 2000;
let box2Dir = false;

let boxAng = 0;

let box3Y = 2000;
let box3Dir = true;

let squareAng = 0;

function setup() {
  createCanvas(800, 500, WEBGL);
  //angleMode(DEGREES);
  //fill(255, 0, 0);
  //rectMode(CENTER);
}

function draw() {
  // Controls
  forwards = 87; // w
  backwards = 83; // s
  left = 65; // a
  right = 68; // d
  rearcam = 67; // c
  
  background('lightblue');
  
  buildCourse();
  buildWalls();
  buildObstacles();
  
  normalMaterial();
  
  //translate(0,0,mouseX);
  // Create camera/rear camera based on if 'v' is pressed
  if (keyIsDown(rearcam)) {
    //camera(0, 0, (height / 2) / tan(PI / 6), x, y, z, 0, 1, 0);
    camera(
            x + camOffset * cos(angle * (PI / 180)),
            y + camOffset * sin(angle * (PI / 180)),
            z + 55,
            x + camAngle * cos(angle * (PI / 180)),
            y + camAngle * sin(angle * (PI / 180)),
            0,
            0, 0, -1
          );
  } if (!keyIsDown(rearcam)) {
    //camera(0, 0, (height / 2) / tan(PI / 6), x, y, z, 0, 1, 0);
    camera(
            x - camOffset * cos(angle * (PI / 180)),
            y - camOffset * sin(angle * (PI / 180)),
            z + 55,
            x - camAngle * cos(angle * (PI / 180)),
            y - camAngle * sin(angle * (PI / 180)),
            0,
            0, 0, -1
          );
  }
  
  // Calculate car rotation and movement
  translate(x, y, z);
  push();
  
  if (keyIsDown(left)) {
    if (keyIsDown(forwards)) {
      angle -= angleDelta;
    }
    if (keyIsDown(backwards)) {
      angle += angleDelta;
    }
  }

  if (keyIsDown(right)) {
    if (keyIsDown(forwards)) {
      angle += angleDelta;
    }
    if (keyIsDown(backwards)) {
      angle -= angleDelta;
    }
  }

  if (keyIsDown(forwards)) {
    x -= distDelta * cos(angle * (PI / 180));
    y -= distDelta * sin(angle * (PI / 180));
  }

  if (keyIsDown(backwards)) {
    x += distDelta * cos(angle * (PI / 180));
    y += distDelta * sin(angle * (PI / 180));
  }
  // Rotate box
  rotateZ(angle * (PI / 180));
  // Create box
  box(70, 35, 30);
  pop();
}

function buildCourse() {
  push();
  let c = color(255, 204, 0);
  fill(c);
  translate(0, 0, 1);
  plane(100, 500)
  pop();
  
  // Build first straight track
  push();
  fill(51);
  plane(2000, 500);
  pop();
  
  // Build first turn 1
  push();
  translate(-1080, 180, 0);
  rotate(3*PI / 4);
  fill(51);
  plane(750, 500);
  pop();
  
  // Build first turn 2
  push();
  translate(-1270, 1000, 0);
  rotate(PI / 2);
  fill(51);
  plane(1500, 500);
  pop();
  
  // Build first turn 3
  push();
  translate(-1075, 1825, 0);
  rotate(PI / 4);
  fill(51);
  plane(750, 500);
  pop();
  
  // Build second straight
  push();
  translate(0, 2000, 0);
  fill(51);
  plane(2000, 500);
  pop();
  
  // Build last turn 1
  push();
  translate(1075, 1825, 0);
  rotate(3*PI / 4);
  fill(51);
  plane(750, 500);
  pop();
  
  // Build last turn 2
  push();
  translate(1270, 1000, 0);
  rotate(PI / 2);
  fill(51);
  plane(1500, 500);
  pop();
  
  // Build last turn 3
  push();
  translate(1080, 180, 0);
  rotate(PI / 4);
  fill(51);
  plane(750, 500);
  pop();
}

function buildWalls() {
  // Build first straight walls
  push();
  translate(0, -250, 25);
  box(2000, 10, 50);
  pop();
  
  push();
  translate(0, 250, 25);
  box(1600, 10, 50);
  pop();
  
  // Build first turn 1 walls
  push();
  translate(-905, 360, 25);
  rotate(3*PI / 4);
  box(315, 10, 50)
  pop();

  push();
  translate(-1255, 5, 25);
  rotate(3*PI / 4)
  box(750, 10, 50)
  pop();
  
  // Build first turn 2 walls
  push();
  translate(-1520, 1000, 25);
  rotate(PI / 2);
  box(1500, 10, 50)
  pop();
  
  push();
  translate(-1015, 1000, 25);
  rotate(PI / 2);
  box(1065, 10, 50);
  pop();
  
  // Build first turn 3 walls
  push();
  translate(-905, 1640, 25);
  rotate(PI / 4);
  box(315, 10, 50)
  pop();

  push();
  translate(-1255, 2005, 25);
  rotate(PI / 4)
  box(750, 10, 50)
  pop();
  
  // Build last turn 1 walls
  push();
  translate(905, 360, 25);
  rotate(PI / 4);
  box(315, 10, 50)
  pop();

  push();
  translate(1255, 5, 25);
  rotate(PI / 4)
  box(750, 10, 50)
  pop();
  
  // Build last turn 2 walls
  push();
  translate(1520, 1000, 25);
  rotate(PI / 2);
  box(1500, 10, 50)
  pop();
  
  push();
  translate(1015, 1000, 25);
  rotate(PI / 2);
  box(1065, 10, 50);
  pop();
  
  // Build last turn 3 walls
  push();
  translate(905, 1640, 25);
  rotate(3*PI / 4);
  box(315, 10, 50)
  pop();

  push();
  translate(1255, 2005, 25);
  rotate(3*PI / 4)
  box(750, 10, 50)
  pop();
  
  // Build second straight walls
  push();
  translate(0, 2250, 25);
  box(2000, 10, 50);
  pop();
  
  push();
  translate(0, 1750, 25);
  box(1600, 10, 50);
  pop();
}

function buildObstacles() {
  // Build cars
  push();
  translate(-250, -50, 15);
  rotate(PI / 2);
  box(70, 35, 30);
  pop();
  
  push();
  translate(-550, 130, 15);
  rotate(PI / 2);
  box(70, 35, 30);
  pop();
  
  push();
  translate(-800, -50, 15);
  rotate(3*PI / 4);
  box(70, 35, 30);
  pop();
  
  push();
  translate(-1100, 280, 25);
  rotate(PI / 2);
  box(50, 50, 50);
  pop();
  
  push();
  translate(-1100, 600, 70);
  cylinder(70, 70);
  pop();
  
  push();
  translate(-1350, 800, 25);
  rotate(PI / 4);
  box(300, 50, 50);
  pop();
  
  push();
  translate(-1150, 1300, 25);
  rotate(3*PI / 4);
  box(300, 50, 50);
  pop();
  
  push();
  translate(-1100, 1750, 15);
  rotate(3*PI / 4);
  box(200, 35, 30);
  pop();
  
  if (box1Y < 1800 || box1Y > 2200) box1Dir = !box1Dir
  if (box1Dir) box1Y += 1;
  else if (!box1Dir) box1Y -= 1;
  
  push();
  translate(-700, box1Y, 25);
  box(50, 50, 50);
  pop();
  
  if (box2Y < 1800 || box2Y > 2200) box2Dir = !box2Dir
  if (box2Dir) box2Y += 2;
  else if (!box2Dir) box2Y -= 2;
  
  push();
  translate(-300, box2Y, 25);
  box(50, 50, 50);
  pop();
  
  push();
  translate(100, 2000, 15);
  rotate(boxAng * (PI / 360));
  box(350, 35, 30);
  pop();
  boxAng++;
  
  if (box3Y < 1800 || box3Y > 2200) box3Dir = !box3Dir
  if (box3Dir) box3Y += 3;
  else if (!box3Dir) box3Y -= 3;
  
  push();
  translate(600, box3Y, 25);
  box(50, 50, 50);
  pop();
  
  push();
  translate(1070, 1770, 15);
  rotate(PI / 4);
  box(400, 35, 30);
  pop();
  
  push();
  translate(1370, 1400, 15);
  box(300, 300, 30);
  pop();
  
  push();
  translate(1170, 1000, 15);
  box(300, 200, 30);
  pop();
  
  push();
  translate(1350, 700, 15);
  box(350, 200, 30);
  pop();
  
  push();
  translate(1080, 170, 15);
  rotate(squareAng * (PI / 360));
  box(300, 300, 30);
  pop();
  squareAng -= 1;
  
  push();
  translate(650, -50, 15);
  rotate(PI / 4);
  box(150, 50, 30);
  pop();
  
  push();
  translate(400, 100, 15);
  rotate(3*PI / 4);
  box(150, 50, 30);
  pop();
  
  push();
  translate(300, -135, 15);
  rotate(PI / 2);
  box(225, 50, 30);
  pop();
}